{"version":3,"sources":["MathjaxPolynomial.tsx","Ex50.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MathJax","require","MathjaxPolynomial","props","ascii","lhs","coefficients","map","c","i","Math","abs","length","v","e","reduce","a","b","Node","inline","ReactVis","Ex50","state","_generateRandomParams","res","isShowingAnswer","Array","from","_DEGREE","floor","_COEFF_MIN","random","_COEFF_MAX","after_sec","_AFTER_SEC_MAX","console","log","JSON","stringify","DiscreteColorLegend","XYPlot","XAxis","YAxis","HorizontalGridLines","ChartLabel","VerticalGridLines","Line","LineSeries","LineSeriesCanvas","style","display","flexDirection","Context","input","this","_Div_HyBJIr6yMulA","_Diff","_At","width","height","t","f","className","data","_Range","x","y","items","onClick","setState","React","Component","p","children","start","stop","step","_","val","pow","slice","App","exerciseSelected","_EXERCISES","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3370b4d.chunk.js","sourcesContent":["import React from 'react';\nconst MathJax:any = require('react-mathjax2');\n\n\n//global const's\ntype Props = {\n  coefficients:number[],\n  lhs?:string,\n};\n//procedures\nfunction _PrintVariableWithExponent(v:string,e:number) {\n  if( e===0 ) {\n    return \"\";\n  } else if (e===1) {\n    return v;\n  } else {\n    return (\"t^\"+(e+\"\"));\n  }\n}\n\nconst MathjaxPolynomial: React.FC<Props> = props => {\n  const ascii = (props.lhs || \"\")\n    +props.coefficients\n      .map((c,i)=>\n        (c!==0)\n          ?(((c<0)?\"-\": (i===0)?\"\":\"+\")\n              +((Math.abs(c)!==1 || (i)===(props.coefficients.length-1)) ? Math.abs(c):\"\")\n              +((props.coefficients.length-1)===(i)?\"\":_PrintVariableWithExponent(\"t\",props.coefficients.length-1-i)))\n          :\"\")\n      .reduce((a,b)=>a+b,\"\");\n\n\treturn (<MathJax.Node inline>{ ascii }</MathJax.Node>);\n}\n\nexport default MathjaxPolynomial;\n","import React from 'react';\nimport './Ex50.css';\nimport MathjaxPolynomial from \"./MathjaxPolynomial\";\nimport 'react-vis/dist/style.css';\nconst MathJax:any = require('react-mathjax2');\nconst Plot:any = require( 'react-function-plot');\nconst ReactVis:{\n    XYPlot:any,\n    XAxis:any,\n    YAxis:any,\n    ChartLabel:any,\n    HorizontalGridLines:any,\n    VerticalGridLines:any,\n    LineSeries:any,\n    LineSeriesCanvas:any,\n    DiscreteColorLegend:any,\n} = require(\"react-vis\");\n\n\n//global const's\ntype Props = {\n\n};\ntype State = {\n  isShowingAnswer:boolean,\n  coefficients: number[],\n  after_sec:number,\n};\n\nclass Ex50 extends React.Component<Props,State> {\n  state:State;\n  private static _DEGREE = 3;\n  private static _COEFF_MIN = -4;\n  private static _COEFF_MAX = 5;\n  private static _AFTER_SEC_MAX = 5;\n  private static _Div_HyBJIr6yMulA = (p:any) => <div className=\"HyBJIr6yMulA\">{p.children}</div>\n\n  private static _Range = (start:number, stop:number, step:number) => {\n    return Array.from({ length: (stop - start) / step + 1}, (_, i) => start + (i * step))\n\t}\n  private static _At = (coefficients:number[],val:number) => {\n    return coefficients\n      .map((c,i)=>Math.pow(val,coefficients.length-i-1)*c)\n      .reduce((a,b)=>a+b,0);\n  }\n  private static _Diff = (coefficients:number[]) => {\n    return coefficients\n                    .slice(0,coefficients.length-1)\n                    .map((c,i)=>c*(coefficients.length-i-1))\n  }\n  private _generateRandomParams = () => {\n    const res:State = {\n      isShowingAnswer:false,\n      coefficients: [\n        1,\n        ...Array.from(\n          {length:Ex50._DEGREE},\n          ()=>Math.floor(Ex50._COEFF_MIN+Math.random()*(Ex50._COEFF_MAX-Ex50._COEFF_MIN))\n        ),\n      ],\n      after_sec: 1+Math.floor(Math.random()*(Ex50._AFTER_SEC_MAX-1)),\n    };\n    console.log(\"generating new state: %s\",JSON.stringify(res,null,2));\n    return res;\n  }\n  constructor(props:Props) {\n    super(props);\n\n    this.state = this._generateRandomParams();\n  }\n  render() {\n    const {\n        DiscreteColorLegend,\n        XYPlot,\n        XAxis,\n        YAxis,\n        ChartLabel,\n        HorizontalGridLines,\n        VerticalGridLines,\n        LineSeries,\n        LineSeriesCanvas,\n    } = ReactVis;\n    const useCanvas = true;\n    const Line = useCanvas ? LineSeriesCanvas : LineSeries;\n\n    return (<div style={{\n      display:\"flex\",\n      flexDirection:\"column\",\n    }}>\n      <p>\n          <span>The equation of motion of a particle is </span>\n          <MathJax.Context input='ascii'>\n            <MathjaxPolynomial coefficients={this.state.coefficients} lhs=\"s=\"/>\n          </MathJax.Context>\n          <span>, where \\(s\\) is in meters and \\(t\\) is in seconds. Find</span>\n      </p>\n      <ol>\n        <li> Find the velocity and acceleration as functions of \\(t\\). </li>\n        <li> Find the acceleration after {this.state.after_sec} s.</li>\n        <li> Graph the position, velocity, and acceleration functions\n        on the same screen.</li>\n      </ol>\n      { this.state.isShowingAnswer && \n        <>\n          <b>Answer.</b>\n          <div style={{\n            display:\"flex\",\n            flexDirection:\"column\",\n          }}>\n            <b>(a)</b>\n            <Ex50._Div_HyBJIr6yMulA>\n              <MathJax.Context input='ascii'>\n                <MathjaxPolynomial \n                  coefficients={Ex50._Diff(this.state.coefficients)}\n                  lhs=\"v=\"\n                />\n              </MathJax.Context>\n            </Ex50._Div_HyBJIr6yMulA>\n            <Ex50._Div_HyBJIr6yMulA>\n              <MathJax.Context input='ascii'>\n                <MathjaxPolynomial \n                  coefficients={Ex50._Diff(Ex50._Diff(this.state.coefficients))} \n                  lhs=\"a=\"\n                />\n              </MathJax.Context>\n            </Ex50._Div_HyBJIr6yMulA>\n            <b>(b)</b>\n            <Ex50._Div_HyBJIr6yMulA>\n              <MathJax.Context input='ascii'>\n                <MathJax.Node inline>{ `v(${this.state.after_sec})=${Ex50._At(Ex50._Diff(this.state.coefficients),this.state.after_sec)}` }</MathJax.Node>\n              </MathJax.Context>\n            </Ex50._Div_HyBJIr6yMulA>\n            <Ex50._Div_HyBJIr6yMulA>\n              <MathJax.Context input='ascii'>\n                <MathJax.Node inline>{ `a(${this.state.after_sec})=${Ex50._At(Ex50._Diff(Ex50._Diff(this.state.coefficients)),this.state.after_sec)}` }</MathJax.Node>\n              </MathJax.Context>\n            </Ex50._Div_HyBJIr6yMulA>\n          </div>\n          <b>(c)</b>\n        <div>\n          <XYPlot width={500} height={500}>\n            <HorizontalGridLines />\n            <VerticalGridLines />\n            <XAxis />\n            <YAxis />\n            {\n              [\n                (t:number)=>Ex50._At(this.state.coefficients,t),\n                (t:number)=>Ex50._At(Ex50._Diff(this.state.coefficients),t),\n                (t:number)=>Ex50._At(Ex50._Diff(Ex50._Diff(this.state.coefficients)),t),\n              ]\n              .map(f=>{\n                return (\n                  <Line\n                    className=\"first-series\"\n                    data={Ex50._Range(0,5,0.1).map(x=>({x,y:f(x)}))}\n                  />\n                );\n              })\n            }\n          </XYPlot>\n          <h2>Legend:</h2>\n          <DiscreteColorLegend height={100} width={200} items={[\"s\",\"v\",\"a\"]}/>\n        </div>\n        </>\n      }\n\n      <button onClick={this.state.isShowingAnswer ?\n        ()=>{this.setState(this._generateRandomParams())} :\n        ()=>{this.setState({isShowingAnswer:true})}\n      }>\n        {this.state.isShowingAnswer ? \"generate another problem\" : \"show answer\"}\n      </button>\n    </div>);\n  }\n}\n\nexport default Ex50;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Ex50 from \"./Ex50\";\nimport MathjaxPolynomial from \"./MathjaxPolynomial\";\nimport 'react-vis/dist/style.css';\nconst MathJax:any = require('react-mathjax2');\nconst Plot:any = require( 'react-function-plot');\nconst ReactVis:{\n    XYPlot:any,\n    XAxis:any,\n    YAxis:any,\n    ChartLabel:any,\n    HorizontalGridLines:any,\n    VerticalGridLines:any,\n    LineSeries:any,\n    LineSeriesCanvas:any,\n    DiscreteColorLegend:any,\n} = require(\"react-vis\");\n\n\n//global const's\ntype State = {\n  exerciseSelected?:string,\n};\n\nclass App extends React.Component<{},State> {\n  private static _EXERCISES:string[] = [\n    \"exercise 50\",\n  ];\n  state:State = {\n  };\n  render() {\n    if( !this.state.exerciseSelected ) {\n      return (\n        <div style={{\n          display:\"flex\"\n        }}>\n        {\n          App._EXERCISES.map(e=>(\n            <button onClick={()=>this.setState({exerciseSelected:e})}>\n              {e}\n            </button>\n          ))\n        }\n        </div>\n      );\n    } else if(this.state.exerciseSelected === \"exercise 50\") {\n      return (<Ex50/>);\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}